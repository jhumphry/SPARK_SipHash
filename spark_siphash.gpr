-- SPARK_SipHash
-- An implementation of SipHash in SPARK 2014 / Ada 2012

library project SPARK_SipHash is

   type Mode_Type is ("debug", "optimize", "analyse", "analyze");
   Mode : Mode_Type := external ("mode", "debug");

   type Entropy_Type is ("none", "urandom", "getrandom");
   Entropy_Source : Entropy_Type := external ("entropy", "getrandom");

   case Entropy_Source is
      when "none"|"urandom" =>
         for Languages use ("Ada");
      when "getrandom" =>
         for Languages use ("Ada", "C");
   end case;

   for Library_Name use "spark_siphash";
   for Library_Kind use "static";

   for Library_Interface use ("SipHash",
                              "SipHash.Discrete",
                              "SipHash.Wide_Discrete",
                              "SipHash.Wide_Wide_Discrete",
                              "SipHash.General",
                              "SipHash.Entropy",
                              "SipHash24",
                              "SipHash24.System_Entropy",
                              "SipHash24_String_Hashing"
                             );

   for Object_Dir use "build/";
   for Library_Dir use "lib/";

   Main_Source_Dirs := ("src/");
   Entropy_Source_Dirs := "";
   Analysis_Source_Dirs := "";

   case Entropy_Source is
      when "none" =>
         Entropy_Source_Dirs := "src/entropy-none/";
      when "urandom" =>
         Entropy_Source_Dirs := "src/entropy-urandom/";
      when "getrandom" =>
         Entropy_Source_Dirs := "src/entropy-getrandom/";
   end case;

   case Mode is
      when "analyse" | "analyze" =>
         Analysis_Source_Dirs := "src/general-provable/";
      when others =>
         Analysis_Source_Dirs := "";
   end case;

   for Source_Dirs use Main_Source_Dirs &
     Entropy_Source_Dirs &
     Analysis_Source_Dirs;

   package Ide is
      for Vcs_Kind use "Git";
      for Documentation_Dir use "doc/";
   end Ide;

   package Compiler is
      case Mode is
         when "debug" =>
            for Default_Switches ("ada") use   ("-fstack-check", "-g", "-gnat2012",
                                                "-gnata", "-gnatf", "-gnato",
                                                "-gnateA", "-gnateV", "-gnatVa",
                                                "-gnatwa.f", "-gnatwZ",
                                                "-gnatyaAbCdfhiknprux");
         when "analyse" | "analyze" =>
            for Default_Switches ("ada") use   ("-g", "-gnat2012",
                                                "-gnata", "-gnatf", "-gnato",
                                                "-gnateA", "-gnatVa",
                                                "-gnatwa.f", "-gnatwZ",
                                                "-gnatyaAbCdfhiknprux");
            -- Note: -gnateV (validity checking on subprogram parameters)
            -- produces conflicts with SPARK, which will prove the validity of
            -- subprogram parameters anyway.
         when "optimize" =>
            for Default_Switches ("ada") use ("-gnat2012", "-O3", "-gnatn");
      end case;
   end Compiler;

   package Prove is
      for Switches use ("-j0", "--timeout=5", "--level=2",
                        "--proof=progressive", "--warnings=continue");
   end Prove;

end SPARK_SipHash;
